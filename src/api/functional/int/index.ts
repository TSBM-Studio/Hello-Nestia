/**
 * @packageDocumentation
 * @module api.functional.int
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection } from '@nestia/fetcher';
import { PlainFetcher } from '@nestia/fetcher/lib/PlainFetcher';
import type { Primitive, tags } from 'typia';

/**
 * @controller AppController.getIntValue
 * @path GET /int/:value
 * @accessor api.functional.int.getIntValue
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getIntValue(
  connection: IConnection,
  value: number & tags.Type<'int32'>,
): Promise<getIntValue.Output> {
  return PlainFetcher.fetch(connection, {
    ...getIntValue.METADATA,
    template: getIntValue.METADATA.path,
    path: getIntValue.path(value),
  });
}
export namespace getIntValue {
  export type Output = Primitive<number>;

  export const METADATA = {
    method: 'GET',
    path: '/int/:value',
    request: null,
    response: {
      type: 'application/json',
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = (value: number & tags.Type<'int32'>) =>
    `/int/${encodeURIComponent(value?.toString() ?? 'null')}`;
}
