/**
 * @packageDocumentation
 * @module api.functional.mock_users
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection } from '@nestia/fetcher';
import { PlainFetcher } from '@nestia/fetcher/lib/PlainFetcher';
import type { NotFoundException } from '@nestjs/common';
import type { Primitive, tags } from 'typia';

import type { IUser } from '../../../app.controller';

/**
 * @throws 404 User not found
 * @controller AppController.findUserById
 * @path GET /mock-users/:id
 * @accessor api.functional.mock_users.findUserById
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function findUserById(
  connection: IConnection,
  id: number & tags.Type<'uint32'>,
): Promise<findUserById.Output> {
  return PlainFetcher.fetch(connection, {
    ...findUserById.METADATA,
    template: findUserById.METADATA.path,
    path: findUserById.path(id),
  });
}
export namespace findUserById {
  export type Output = Primitive<IUser>;

  export const METADATA = {
    method: 'GET',
    path: '/mock-users/:id',
    request: null,
    response: {
      type: 'application/json',
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = (id: number & tags.Type<'uint32'>) =>
    `/mock-users/${encodeURIComponent(id?.toString() ?? 'null')}`;
}
