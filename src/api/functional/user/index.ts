/**
 * @packageDocumentation
 * @module api.functional.user
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection } from '@nestia/fetcher';
import { PlainFetcher } from '@nestia/fetcher/lib/PlainFetcher';
import type { Primitive } from 'typia';

import type { CreateUserDto } from '../../../user/dto/create-user.dto';
import type { UpdateUserDto } from '../../../user/dto/update-user.dto';
import type { User } from '../../../user/entities/user.entity';

/**
 * @controller UserController.create
 * @path POST /user
 * @accessor api.functional.user.create
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function create(
  connection: IConnection,
  createUserDto: create.Body,
): Promise<create.Output> {
  return PlainFetcher.fetch(
    {
      ...connection,
      headers: {
        ...connection.headers,
        'Content-Type': 'application/json',
      },
    },
    {
      ...create.METADATA,
      template: create.METADATA.path,
      path: create.path(),
    },
    createUserDto,
  );
}
export namespace create {
  export type Body = Primitive<CreateUserDto>;
  export type Output = Primitive<User>;

  export const METADATA = {
    method: 'POST',
    path: '/user',
    request: {
      type: 'application/json',
      encrypted: false,
    },
    response: {
      type: 'application/json',
      encrypted: false,
    },
    status: 201,
  } as const;

  export const path = () => '/user';
}

/**
 * @controller UserController.findAll
 * @path GET /user
 * @accessor api.functional.user.findAll
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function findAll(
  connection: IConnection,
): Promise<findAll.Output> {
  return PlainFetcher.fetch(connection, {
    ...findAll.METADATA,
    template: findAll.METADATA.path,
    path: findAll.path(),
  });
}
export namespace findAll {
  export type Output = Primitive<Array<User>>;

  export const METADATA = {
    method: 'GET',
    path: '/user',
    request: null,
    response: {
      type: 'application/json',
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = () => '/user';
}

/**
 * @controller UserController.findOne
 * @path GET /user/:id
 * @accessor api.functional.user.findOne
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function findOne(
  connection: IConnection,
  id: string,
): Promise<findOne.Output> {
  return PlainFetcher.fetch(connection, {
    ...findOne.METADATA,
    template: findOne.METADATA.path,
    path: findOne.path(id),
  });
}
export namespace findOne {
  export type Output = Primitive<null | User>;

  export const METADATA = {
    method: 'GET',
    path: '/user/:id',
    request: null,
    response: {
      type: 'application/json',
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = (id: string) =>
    `/user/${encodeURIComponent(id?.toString() ?? 'null')}`;
}

/**
 * @controller UserController.update
 * @path PATCH /user/:id
 * @accessor api.functional.user.update
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function update(
  connection: IConnection,
  id: string,
  updateUserDto: update.Body,
): Promise<update.Output> {
  return PlainFetcher.fetch(
    {
      ...connection,
      headers: {
        ...connection.headers,
        'Content-Type': 'application/json',
      },
    },
    {
      ...update.METADATA,
      template: update.METADATA.path,
      path: update.path(id),
    },
    updateUserDto,
  );
}
export namespace update {
  export type Body = Primitive<UpdateUserDto>;
  export type Output = Primitive<null | User>;

  export const METADATA = {
    method: 'PATCH',
    path: '/user/:id',
    request: {
      type: 'application/json',
      encrypted: false,
    },
    response: {
      type: 'application/json',
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = (id: string) =>
    `/user/${encodeURIComponent(id?.toString() ?? 'null')}`;
}

/**
 * @controller UserController.remove
 * @path DELETE /user/:id
 * @accessor api.functional.user.remove
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function remove(
  connection: IConnection,
  id: string,
): Promise<void> {
  return PlainFetcher.fetch(connection, {
    ...remove.METADATA,
    template: remove.METADATA.path,
    path: remove.path(id),
  });
}
export namespace remove {
  export const METADATA = {
    method: 'DELETE',
    path: '/user/:id',
    request: null,
    response: {
      type: 'application/json',
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = (id: string) =>
    `/user/${encodeURIComponent(id?.toString() ?? 'null')}`;
}
