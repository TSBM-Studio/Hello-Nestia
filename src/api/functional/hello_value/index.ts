/**
 * @packageDocumentation
 * @module api.functional.hello_value
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection } from '@nestia/fetcher';
import { PlainFetcher } from '@nestia/fetcher/lib/PlainFetcher';
import type { Primitive } from 'typia';

/**
 * @controller AppController.getValue
 * @path GET /hello-value/:value
 * @accessor api.functional.hello_value.getValue
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getValue(
  connection: IConnection,
  value: string,
): Promise<getValue.Output> {
  return PlainFetcher.fetch(connection, {
    ...getValue.METADATA,
    template: getValue.METADATA.path,
    path: getValue.path(value),
  });
}
export namespace getValue {
  export type Output = Primitive<string>;

  export const METADATA = {
    method: 'GET',
    path: '/hello-value/:value',
    request: null,
    response: {
      type: 'application/json',
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = (value: string) =>
    `/hello-value/${encodeURIComponent(value?.toString() ?? 'null')}`;
}
