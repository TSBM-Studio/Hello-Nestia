/**
 * @packageDocumentation
 * @module api.functional.paged
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection } from '@nestia/fetcher';
import { PlainFetcher } from '@nestia/fetcher/lib/PlainFetcher';
import type { Primitive, Resolved } from 'typia';

import type { IPage } from '../../../common/page';

/**
 * @controller AppController.pagedQuery
 * @path GET /paged
 * @accessor api.functional.paged.pagedQuery
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function pagedQuery(
  connection: IConnection,
  query: pagedQuery.Query,
): Promise<pagedQuery.Output> {
  return PlainFetcher.fetch(connection, {
    ...pagedQuery.METADATA,
    template: pagedQuery.METADATA.path,
    path: pagedQuery.path(query),
  });
}
export namespace pagedQuery {
  export type Query = Resolved<IPage>;
  export type Output = Primitive<string>;

  export const METADATA = {
    method: 'GET',
    path: '/paged',
    request: null,
    response: {
      type: 'application/json',
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = (query: Query) => {
    const variables: URLSearchParams = new URLSearchParams();
    for (const [key, value] of Object.entries(query as any))
      if (undefined === value) continue;
      else if (Array.isArray(value))
        value.forEach((elem: any) => variables.append(key, String(elem)));
      else variables.set(key, String(value));
    const location: string = '/paged';
    return 0 === variables.size
      ? location
      : `${location}?${variables.toString()}`;
  };
}
